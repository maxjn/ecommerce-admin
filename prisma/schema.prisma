// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Generates schema.dbml file
// Visualize using https://dbdiagram.io/
generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}



model Store {
  id         String      @id @default(uuid())
  name       String
  userId     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  // Relations
  billboards Billboard[] @relation("StoreToBillboard")
  Categories Category[]  @relation("StoreToCategory")
  Sizes      Size[]      @relation("StoreToSize")
  Colors     Color[]     @relation("StoreToColor")
  Products   Product[]   @relation("StoreToProduct")
  Orders     Order[]     @relation("StoreToOrder")
}

model Billboard{
  id         String      @id @default(uuid())
  label      String
  imageUrl   String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  // Relations
  storeId    String
  store      Store       @relation("StoreToBillboard",fields:[storeId],references:[id])
  categories Category[]

@@index([storeId])
}

model Category{
  id         String      @id @default(uuid())
  name       String
  products   Product[]   @relation("CategoryToProduct")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  // Relations
  storeId        String
  store          Store   @relation("StoreToCategory",fields:[storeId],references:[id])
  billboardId    String
  billboard      Billboard @relation(fields:[billboardId],references:[id])

@@index([storeId])
@@index([billboardId])
}

model Size{
  id         String      @id @default(uuid())
  name       String
  value      String
  products   Product[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  // Relations
  storeId    String
  store      Store       @relation("StoreToSize",fields:[storeId],references:[id])

@@index([storeId])
}

model Color{
  id         String      @id @default(uuid())
  name       String
  value      String
  products   Product[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  // Relations
  storeId    String
  store      Store       @relation("StoreToColor",fields:[storeId],references:[id])

@@index([storeId])
}

model Product{
  id         String      @id @default(uuid())
  name       String
  price      Decimal
  isFeatured Boolean     @default(false)
  isArchived Boolean     @default(false)
  images     Image[]
  orderItems OrderItem[]

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  // Relations
  storeId       String
  store         Store    @relation("StoreToProduct",fields:[storeId],references:[id])
  categoryId    String
  category      Category @relation("CategoryToProduct",fields:[categoryId],references:[id])
  sizeId        String
  size          Size     @relation(fields:[sizeId],references:[id])
  colorId       String
  color         Color    @relation(fields:[colorId],references:[id])


@@index([storeId])
@@index([categoryId])
@@index([sizeId])
@@index([colorId])
}

model Image{
  id         String      @id @default(uuid())
  url        String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  // Relations
  productId    String
  product      Product   @relation(fields:[productId],references:[id],onDelete: Cascade)

@@index([productId])
}


model Order{
  id        String       @id @default(uuid())
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderItems    OrderItem[]


// Relations
  storeId       String
  store         Store    @relation("StoreToOrder",fields:[storeId],references:[id])

  @@index([storeId])
}

 model OrderItem{
  id         String      @id @default(uuid())
  url        String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  // Relations
  orderId      String
  order        Order   @relation(fields:[orderId],references:[id])
  productId    String
  product      Product   @relation(fields:[productId],references:[id])


@@index([productId])
@@index([orderId])
}
